for (i in 1:nrow(Abzinsungstabelle)) {
for (j in 1:ncol(Abzinsungstabelle)) {
Abzinsungstabelle[i,j] = (1/(1+Zinsstrukturkurven$RFNoVA[j]))
if (j>1) {
for (k in 1:j) {
Abzinsungstabelle[i,j] = Abzinsungstabelle[i,j]*(1/(1+Zinsstrukturkurven$RFNoVA[j]))
}
}
}
}
# Variable zur wahl der Zinsstrukturkurve
ZinsSK = 1
#erstelle Rechnungszinsvektor
rZins = rep(0.02,length(Tafeln$x))
for (i in 5:length(Tafeln$x)) {
rZins[i]=0.015
}
#######################################################################################
### lese Arbeitsschritt 1 ein - Funktionen für tPx
#######################################################################################
source('Projekt_Arbeitsschritt_1.R',local = TRUE)
#######################################################################################
### Simulation - Vorbereitungen und Start
#######################################################################################
# Anzahl Simulationen
n = 1
# EWR-Matrix zum abspeichern der berrechneten EWR-Werte
EWRMatrix = matrix(nrow = 1,ncol=n,byrow=TRUE)
# maximal erreichbares Alter
AgeMax = length(Tafeln$x)
# starte berechnungen
for (p in 1:n) {
#######################################################################################
### erstelle Eintrittsjahr-Tabelle
#######################################################################################
# in dieser Tabelle sind die Jahreszahlen fÃ¼r den Eintritt des Todes sowie des
# Schadensfalles (nach Stufe) verzeichnet
>
2
q = [0.4,0.7,1]
q_PST = c(0.4,0.7,1)
q_PSt
q_PST
func_A_x_PST <- function(x){
A = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + Bestand$L[x]*12*Tafeln$Kx_Pst_I[j]
}
return(A)
}
func_A_x_PST(Bestand$x[1])
func_A_x_PST <- function(x){
A = 0
for (j in 0:(AgeMax-Bestand$x[x])) {
A = A + Bestand$L[x]*12*Tafeln$Kx_Pst_I[j]
}
return(A)
}
func_A_x_PST(1)
A = 0
for (i in 1:1) {
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + 12*Bestand$L[i]
}
}
A
View(Abzinsungstabelle)
diskontRZins <- rep(0,length(rZins))
rZins = rep(0.02,length(Tafeln$x))
for (i in 5:length(Tafeln$x)) {
rZins[i]=0.015
}
diskontRZins <- rep(1,length(rZins))
for (i in 1:length(diskontRZins)) {
for (j in 1:i) {
diskontRZins[i] = diskontRZins[i]*(1/(1+rZins[i]))
}
}
diskontRZins
#erstelle Rechnungszinsvektor
rZins = rep(0.02,length(Tafeln$x))
for (i in 6:length(Tafeln$x)) {
rZins[i]=0.015
}
diskontRZins <- rep(1,length(rZins))
for (i in 1:length(diskontRZins)) {
for (j in 1:i) {
diskontRZins[i] = diskontRZins[i]*(1/(1+rZins[i]))
}
}
rZins = rep(0.02,length(Tafeln$x))
for (i in 6:length(Tafeln$x)) {
rZins[i]=0.015
}
diskontRZins <- rep(1,length(rZins))
diskontRZins[1] = (1/(1+rZins[1]))
for (i in 2:length(diskontRZins)) {
diskontRZins[i] = diskontRZins[i-1]*(1/(1+rZins[i]))
}
diskontRZins
setwd("C:/Users/maja/Downloads/solvency-2016-02-25/solvency")
#######################################################################################
### daten einlesen
#######################################################################################
Bestand <- read.csv("BestandTest.csv", header = TRUE)
#Bestand <- read.csv("Bestand.csv", header = TRUE)
Tafeln <- read.csv("Tafeln.csv", header = TRUE)
Zinsstrukturkurven <- read.csv("Zinsstrukturkurven.csv", header = TRUE)
#######################################################################################
### Variablen
#######################################################################################
# maximal erreichbares Alter
AgeMax = length(Tafeln$x)
#######################################################################################
### erstelle Abzinsungstabelle
#######################################################################################
#erstelle Rechnungszinsvektor
rZins = rep(0.02,length(Tafeln$x))
for (i in 6:length(Tafeln$x)) {
rZins[i]=0.015
}
diskontRZins <- rep(1,length(rZins))
diskontRZins[1] = (1/(1+rZins[1]))
for (i in 2:length(diskontRZins)) {
diskontRZins[i] = diskontRZins[i-1]*(1/(1+rZins[i]))
}
# erstelle Tabelle für Abzinsungen
Abzinsungstabelle <- matrix(nrow = 2,ncol=length(Zinsstrukturkurven$Jahr),byrow=TRUE)
rownames(Abzinsungstabelle) <- c('RFNoVA','RFVA')
for (i in 1:nrow(Abzinsungstabelle)) {
for (j in 1:ncol(Abzinsungstabelle)) {
Abzinsungstabelle[i,j] = (1/(1+Zinsstrukturkurven$RFNoVA[j]))
if (j>1) {
for (k in 1:j) {
Abzinsungstabelle[i,j] = Abzinsungstabelle[i,j]*(1/(1+Zinsstrukturkurven$RFNoVA[j]))
}
}
}
}
# Variable zur wahl der Zinsstrukturkurve
ZinsSK = 1
#######################################################################################
### lese Arbeitsschritt 1 ein - Funktionen für tPx
#######################################################################################
source('Projekt_Arbeitsschritt_1.R',local = TRUE)
#######################################################################################
### lese Arbeitsschritt 2 ein - Funktionen für tVx
#######################################################################################
source('Projekt_Arbeitsschritt_2.R',local = TRUE)
A = 0
for (i in 1:1) {
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + 12*Bestand$L[i]*diskontRZins[j]
}
}
A
setwd("C:/Users/maja/Downloads/solvency-2016-02-25/solvency")
#######################################################################################
### daten einlesen
#######################################################################################
Bestand <- read.csv("BestandTest.csv", header = TRUE)
#Bestand <- read.csv("Bestand.csv", header = TRUE)
Tafeln <- read.csv("Tafeln.csv", header = TRUE)
Zinsstrukturkurven <- read.csv("Zinsstrukturkurven.csv", header = TRUE)
#######################################################################################
### Variablen
#######################################################################################
# maximal erreichbares Alter
AgeMax = length(Tafeln$x)
#######################################################################################
### erstelle Abzinsungstabelle
#######################################################################################
#erstelle Rechnungszinsvektor
rZins = rep(0.02,length(Tafeln$x))
for (i in 6:length(Tafeln$x)) {
rZins[i]=0.015
}
diskontRZins <- rep(1,length(rZins))
diskontRZins[1] = (1/(1+rZins[1]))
for (i in 2:length(diskontRZins)) {
diskontRZins[i] = diskontRZins[i-1]*(1/(1+rZins[i]))
}
# erstelle Tabelle für Abzinsungen
Abzinsungstabelle <- matrix(nrow = 2,ncol=length(Zinsstrukturkurven$Jahr),byrow=TRUE)
rownames(Abzinsungstabelle) <- c('RFNoVA','RFVA')
for (i in 1:nrow(Abzinsungstabelle)) {
for (j in 1:ncol(Abzinsungstabelle)) {
Abzinsungstabelle[i,j] = (1/(1+Zinsstrukturkurven$RFNoVA[j]))
if (j>1) {
for (k in 1:j) {
Abzinsungstabelle[i,j] = Abzinsungstabelle[i,j]*(1/(1+Zinsstrukturkurven$RFNoVA[j]))
}
}
}
}
# Variable zur wahl der Zinsstrukturkurve
ZinsSK = 1
#######################################################################################
### lese Arbeitsschritt 1 ein - Funktionen für tPx
#######################################################################################
source('Projekt_Arbeitsschritt_1.R',local = TRUE)
source('Projekt_Arbeitsschritt_2.R',local = TRUE)
A = 0
A = 0
for (i in 1:1) {
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + 12*Bestand$L[i]*diskontRZins[j]
}
}
A = 0
for (i in 1:2) {
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + 12*Bestand$L[i]*diskontRZins[j]
}
}
diskontRZins[2]
A = 0
for (i in 1:1) {
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + 12*Bestand$L[i]*diskontRZins[j+1]
}
}
A
A = 0
for (i in 1:1) {
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + 12*Bestand$L[i]*diskontRZins[j+1]*Tafeln$Kx_Pst_I[Bestand$x[i]+j]
}
}
A
A = 0
for (i in 1:1) {
for (j in 0:(AgeMax-Bestand$x[i])) {
A = A + 12*Bestand$L[i]*diskontRZins[j+1]*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j])
}
}
A
b = c(0.5,0.5)
c
b
A*b
A = 0
for (i in 1:1) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = App + 12*Bestand$L[i]*diskontRZins[j+1]*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = sum(A_pp*q_PST)
}
q_PST = c(0.4,0.7,1)
A = 0
for (i in 1:1) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + 12*Bestand$L[i]*diskontRZins[j+1]*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = sum(A_pp*q_PST)
}
A
q_PST = c(0.4,0.7,1)
A = 0
for (i in 1:Bestand$x) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + 12*Bestand$L[i]*diskontRZins[j+1]*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A = 0
for (i in 1:length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + 12*Bestand$L[i]*diskontRZins[j+1]*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
View(tPx_q_m_Matrix)
A = 0
for (i in 1:length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
tPx_q_m_Matrix[1,Bestand$x[1]]
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
func_tPx_q_m <- function(t,x,lambda_q=1){
buffer = 1
for(i in 0:(t-1))
buffer = buffer * (1 - (lambda_q*Tafeln$qx_m[x+t]))
return(buffer)
}
tPx_q_m_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
tPx_q_w_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
tPx_w_m_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
tPx_w_w_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
for (i in 1:length(Tafeln$x)) {
for (j in 1:length(Tafeln$x)) {
if(i>j){
tPx_q_m_Matrix[i,j] = func_tPx_q_m(i,j)
tPx_q_w_Matrix[i,j] = func_tPx_q_w(i,j)
tPx_w_m_Matrix[i,j] = func_tPx_w_m(i,j)
tPx_w_w_Matrix[i,j] = func_tPx_w_w(i,j)
}
}
}
View(tPx_q_m_Matrix)
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A
View(tPx_q_m_Matrix)
func_tPx_q_m <- function(t,x,lambda_q=1){
buffer = 1
for(i in 1:t)
buffer = buffer * (1 - (lambda_q*Tafeln$qx_m[x+t]))
return(buffer)
}
func_tPx_q_w <- function(t,x,lambda_q=1){
buffer = 1
for(i in x:(t))
buffer = buffer * (1 - (lambda_q*Tafeln$qx_w[i]))
return(buffer)
}
func_tPx_w_m <- function(t,x,lambda_w=1){
buffer = 1
for(i in x:(t))
buffer = buffer * (1 - (lambda_w*Tafeln$wx_m[i]))
return(buffer)
}
func_tPx_w_w <- function(t,x,lambda_w=1){
buffer = 1
for(i in x:(t))
buffer = buffer * (1 - (lambda_w*Tafeln$wx_w[i]))
return(buffer)
}
tPx_q_m_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
tPx_q_w_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
tPx_w_m_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
tPx_w_w_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
for (i in 1:length(Tafeln$x)) {
for (j in 1:length(Tafeln$x)) {
if(i>j){
tPx_q_m_Matrix[i,j] = func_tPx_q_m(i,j)
tPx_q_w_Matrix[i,j] = func_tPx_q_w(i,j)
tPx_w_m_Matrix[i,j] = func_tPx_w_m(i,j)
tPx_w_w_Matrix[i,j] = func_tPx_w_w(i,j)
}
}
}
View(tPx_q_m_Matrix)
func_tPx_q_m <- function(t,x,lambda_q=1){
buffer = 1
for(i in 0:(t-1))
buffer = buffer * (1 - (lambda_q*Tafeln$qx_m[x+i]))
return(buffer)
}
tPx_q_m_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
for (i in 1:length(Tafeln$x)) {
for (j in 1:length(Tafeln$x)) {
if(i>j){
tPx_q_m_Matrix[i,j] = func_tPx_q_m(i,j)
}
}
}
View(tPx_q_m_Matrix)
func_tPx_q_m(2,60)
func_tPx_q_m(20,60)
Tafeln$qx_m
View(tPx_q_m_Matrix)
View(tPx_q_m_Matrix)
func_tPx_q_m(60,60)
func_tPx_q_m(60,61)
func_tPx_q_m(60,62)
func_tPx_q_m(1,62)
func_tPx_q_m(1,82)
func_tPx_q_m(1,8)
func_tPx_q_m(1,81)
func_tPx_q_m(2,81)
func_tPx_q_m(20,81)
func_tPx_q_m(21,81)
func_tPx_q_m(22,81)
func_tPx_q_m(21,81)
func_tPx_q_m(0,81)
func_tPx_q_m(1,81)
func_tPx_q_m(2,81)
func_tPx_q_m <- function(t,x,lambda_q=1){
buffer = 1
for(i in 0:(t-1))
buffer = buffer * (1 - (lambda_q*Tafeln$qx_m[x+i]))
return(buffer)
}
tPx_q_m_Matrix = matrix(nrow = length(Tafeln$x),ncol=length(Tafeln$x),byrow=TRUE)
for (i in 1:length(Tafeln$x)) {
for (j in 1:length(Tafeln$x)) {
if(i<=(length(Tafeln$x)-j)){
tPx_q_m_Matrix[i,j] = func_tPx_q_m(i,j)
}
}
}
View(tPx_q_m_Matrix)
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i])) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A
*tPx_q_m_Matrix[j+1,Bestand$x[i]]
tPx_q_m_Matrix[j+1,Bestand$x[i]]
q_PST = c(0.4,0.7,1)
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i]-1)) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A
q_PST = c(0.4,0.7,1)
A = 0
for (i in 1:1){#length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i]-1)) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A
tPx_q_m_Matrix[32,60]
tPx_q_m_Matrix[42,60]
tPx_q_m_Matrix[41,60]
q_PST = c(0.4,0.7,1)
A = 0
for (i in 1:length(Bestand$x)) {
A_pp = 0
for (j in 0:(AgeMax-Bestand$x[i]-1)) {
A_pp = A_pp + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A = A+sum(A_pp*q_PST)
}
A
a_x = 0
for (i in 1:length(Bestand$x)) {
buffer = 0
for (j in 0:(AgeMax-Bestand$x[i]-1)) {
buffer = buffer + diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]]
}
a_x = a_x + sum(buffer*q_PST)
}
a_x
q_PST = c(0.4,0.7,1)
A_x_PST = 0
for (i in 1:length(Bestand$x)) {
buffer = 0
for (j in 0:(AgeMax-Bestand$x[i]-1)) {
buffer = buffer + (12*Bestand$L[i]*diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]])*c(Tafeln$Kx_Pst_I[Bestand$x[i]+j],Tafeln$Kx_Pst_II[Bestand$x[i]+j],Tafeln$Kx_Pst_III[Bestand$x[i]+j])
}
A_x_PST = A_x_PST + sum(buffer*q_PST)
}
a_x = 0
for (i in 1:length(Bestand$x)) {
buffer = 0
for (j in 0:(AgeMax-Bestand$x[i]-1)) {
buffer = buffer + diskontRZins[j+1]*tPx_q_m_Matrix[j+1,Bestand$x[i]]
}
a_x = a_x + sum(buffer*q_PST)
}
A_x_PST
a_x
A_x_PST/a_x
